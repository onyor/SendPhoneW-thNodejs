"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Voice = void 0;
const tslib_1 = require("tslib");
const server_client_1 = require("@vonage/server-client");
const remapObjects = (mapping, newObject, oldObject) => {
    for (const key in mapping) {
        if (oldObject[mapping[key]]) {
            newObject[key] = oldObject[mapping[key]];
            delete oldObject[mapping[key]];
        }
    }
    newObject = Object.assign(Object.assign({}, newObject), oldObject);
    return newObject;
};
class Voice extends server_client_1.Client {
    constructor() {
        super(...arguments);
        this.authType = server_client_1.AuthenticationType.JWT;
    }
    createOutboundCall(call) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const resp = yield this.sendPostRequest(`${this.config.apiHost}/v1/calls/`, call);
            return resp.data;
        });
    }
    earmuffCall(uuid) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.sendPutRequest(`${this.config.apiHost}/v1/calls/${uuid}`, { action: 'earmuff' });
        });
    }
    getCall(uuid) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const resp = yield this.sendGetRequest(`${this.config.apiHost}/v1/calls/${uuid}`);
            return resp.data;
        });
    }
    hangupCall(uuid) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.sendPutRequest(`${this.config.apiHost}/v1/calls/${uuid}`, { action: 'hangup' });
        });
    }
    muteCall(uuid) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.sendPutRequest(`${this.config.apiHost}/v1/calls/${uuid}`, { action: 'mute' });
        });
    }
    playDTMF(uuid, digits) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const resp = yield this.sendPutRequest(`${this.config.apiHost}/v1/calls/${uuid}/dtmf`, { digits });
            return resp.data;
        });
    }
    playTTS(uuid, action) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            delete action.action;
            const resp = yield this.sendPutRequest(`${this.config.apiHost}/v1/calls/${uuid}/talk`, action);
            return resp.data;
        });
    }
    search(filter) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (filter) {
                filter = remapObjects({
                    status: 'status',
                    date_start: 'dateStart',
                    date_end: 'dateEnd',
                    page_size: 'pageSize',
                    record_index: 'recordIndex',
                    order: 'order',
                    conversation_uuid: 'conversationUUID',
                }, {}, filter);
            }
            const resp = yield this.sendGetRequest(`${this.config.apiHost}/v1/calls`, filter);
            return resp.data;
        });
    }
    stopStreamAudio(uuid) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const resp = yield this.sendDeleteRequest(`${this.config.apiHost}/v1/calls/${uuid}/stream`);
            return resp.data;
        });
    }
    stopTTS(uuid) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const resp = yield this.sendDeleteRequest(`${this.config.apiHost}/v1/calls/${uuid}/talk`);
            return resp.data;
        });
    }
    streamAudio(uuid, url, loop = 1, volumeLevel = 0.0) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const data = {
                stream_url: [url],
                loop,
                level: String(volumeLevel),
            };
            const resp = yield this.sendPutRequest(`${this.config.apiHost}/v1/calls/${uuid}/stream`, data);
            return resp.data;
        });
    }
    transferCallWithNCCO(uuid, ncco) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const action = {
                action: 'transfer',
                destination: {
                    type: 'ncco',
                    ncco,
                },
            };
            yield this.sendPutRequest(`${this.config.apiHost}/v1/calls/${uuid}`, action);
        });
    }
    transferCallWithURL(uuid, url) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const action = {
                action: 'transfer',
                destination: {
                    type: 'ncco',
                    url: [url],
                },
            };
            yield this.sendPutRequest(`${this.config.apiHost}/v1/calls/${uuid}`, action);
        });
    }
    unearmuffCall(uuid) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.sendPutRequest(`${this.config.apiHost}/v1/calls/${uuid}`, { action: 'unearmuff' });
        });
    }
    unmuteCall(uuid) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.sendPutRequest(`${this.config.apiHost}/v1/calls/${uuid}`, { action: 'unmute' });
        });
    }
}
exports.Voice = Voice;
//# sourceMappingURL=voice.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Numbers = void 0;
const tslib_1 = require("tslib");
const server_client_1 = require("@vonage/server-client");
const Feature_1 = require("./enums/Feature");
const remapObjects = (mapping, newObject, oldObject) => {
    for (const key in mapping) {
        if (oldObject[mapping[key]]) {
            newObject[key] = oldObject[mapping[key]];
            delete oldObject[mapping[key]];
        }
    }
    newObject = Object.assign(Object.assign({}, newObject), oldObject);
    return newObject;
};
class Numbers extends server_client_1.Client {
    constructor() {
        super(...arguments);
        this.authType = server_client_1.AuthenticationType.QUERY_KEY_SECRET;
    }
    buyNumber(params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const mapping = { target_api_key: 'targetApiKey' };
            const data = remapObjects(mapping, {}, params);
            const resp = yield this.sendFormSubmitRequest(`${this.config.restHost}/number/buy`, data);
            return {
                errorCode: resp.data['error-code'],
                errorCodeLabel: resp.data['error-code-label'],
            };
        });
    }
    cancelNumber(params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const mapping = { target_api_key: 'targetApiKey' };
            const data = remapObjects(mapping, {}, params);
            const resp = yield this.sendFormSubmitRequest(`${this.config.restHost}/number/cancel`, data);
            return {
                errorCode: resp.data['error-code'],
                errorCodeLabel: resp.data['error-code-label'],
            };
        });
    }
    getAvailableNumbers(filter) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const mapping = {
                search_pattern: 'searchPattern',
            };
            const data = remapObjects(mapping, {}, filter);
            if (data.features) {
                if (data.features.length === 1) {
                    data.features = data.features.join();
                }
                else if (data.features.length === 2) {
                    const newOrder = [];
                    if (data.features.includes(Feature_1.Feature.SMS)) {
                        newOrder.push(Feature_1.Feature.SMS);
                    }
                    if (data.features.includes(Feature_1.Feature.VOICE)) {
                        newOrder.push(Feature_1.Feature.VOICE);
                    }
                    if (data.features.includes(Feature_1.Feature.MMS)) {
                        newOrder.push(Feature_1.Feature.MMS);
                    }
                    data.features = newOrder.join(',');
                }
                else if (data.features.length === 3) {
                    data.features = [Feature_1.Feature.SMS, Feature_1.Feature.MMS, Feature_1.Feature.VOICE].join(',');
                }
                else {
                    throw new Error('Invalid number of features request');
                }
            }
            const resp = yield this.sendGetRequest(`${this.config.restHost}/number/search`, data);
            return resp.data;
        });
    }
    getOwnedNumbers(filter) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!filter) {
                filter = {};
            }
            const mapping = {
                application_id: 'applicationId',
                has_application: 'hasApplication',
                search_pattern: 'searchPattern',
            };
            const data = remapObjects(mapping, {}, filter);
            const resp = yield this.sendGetRequest(`${this.config.restHost}/account/numbers`, data);
            return resp.data;
        });
    }
    updateNumber(params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const mapping = {
                app_id: 'applicationId',
            };
            const data = remapObjects(mapping, {}, params);
            const resp = yield this.sendFormSubmitRequest(`${this.config.restHost}/number/update`, data);
            return {
                errorCode: resp.data['error-code'],
                errorCodeLabel: resp.data['error-code-label'],
            };
        });
    }
}
exports.Numbers = Numbers;
//# sourceMappingURL=numbers.js.map
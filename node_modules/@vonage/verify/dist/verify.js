"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Verify = void 0;
const tslib_1 = require("tslib");
const server_client_1 = require("@vonage/server-client");
const Command_1 = require("./enums/Command");
const remapObjects = (mapping, newObject, oldObject) => {
    for (const key in mapping) {
        if (oldObject[mapping[key]]) {
            newObject[key] = oldObject[mapping[key]];
            delete oldObject[mapping[key]];
        }
    }
    newObject = Object.assign(Object.assign({}, newObject), oldObject);
    return newObject;
};
class Verify extends server_client_1.Client {
    cancel(requestId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const data = {
                request_id: requestId,
                cmd: Command_1.Command.CANCEL,
            };
            const resp = yield this.sendPostRequest(`${this.config.apiHost}/verify/control/json`, data);
            return resp.data;
        });
    }
    check(requestId, code) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const data = {
                request_id: requestId,
                code,
            };
            const resp = yield this.sendPostRequest(`${this.config.apiHost}/verify/check/json`, data);
            return resp.data;
        });
    }
    search(requestId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const resp = yield this.sendGetRequest(`${this.config.apiHost}/verify/search/json`, { request_id: requestId });
            return resp.data;
        });
    }
    start(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let url = '';
            if ('brand' in request) {
                url = `${this.config.apiHost}/verify/json`;
            }
            else {
                url = `${this.config.apiHost}/verify/psd2/json`;
            }
            let newRequest;
            let mapping;
            if ('brand' in request) {
                newRequest = {
                    number: request.number,
                    brand: request.brand,
                };
                mapping = {
                    sender_id: 'senderId',
                    code_length: 'codeLength',
                    pin_expiry: 'pinExpiry',
                    lg: 'language',
                    next_event_wait: 'nextEventWait',
                    workflow_id: 'workflowId',
                };
            }
            else {
                newRequest = {
                    number: request.number,
                    payee: request.payee,
                    amount: request.amount,
                };
                mapping = {
                    code_length: 'codeLength',
                    pin_expiry: 'pinExpiry',
                    lg: 'language',
                    next_event_wait: 'nextEventWait',
                    workflow_id: 'workflowId',
                };
            }
            newRequest = remapObjects(mapping, newRequest, request);
            const resp = yield this.sendPostRequest(url, newRequest);
            return resp.data;
        });
    }
    trigger(requestId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const data = {
                request_id: requestId,
                cmd: Command_1.Command.TRIGGER_NEXT_EVENT,
            };
            const resp = yield this.sendPostRequest(`${this.config.apiHost}/verify/control/json`, data);
            return resp.data;
        });
    }
}
exports.Verify = Verify;
//# sourceMappingURL=verify.js.map